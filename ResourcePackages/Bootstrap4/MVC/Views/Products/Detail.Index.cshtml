@model UCommerce.Sitefinity.UI.Mvc.ViewModels.ProductDetailViewModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers
@using Telerik.Sitefinity.Services;

@Html.StyleSheet(Url.WidgetContent("assets/src/css/uc-vue-styles.css"), "head")
@Html.StyleSheet(Url.WidgetContent("assets/dist/css/main.min.css"), "head")

@if (Model != null)
{
    if (!SystemManager.IsDesignMode)
    {
        @Html.Script(Url.WidgetContent("assets/build/js/vendor.bundle.js"), "bottom", false)
        @Html.Script(Url.WidgetContent("assets/build/js/main.js"), "bottom", false)
        @Html.Script(Url.Content("~/bundles/ucommerce-js"), "bottom")
    }

    <div class="container-fluid my-5" data-component="products" id="@Html.UniqueId("product-details")" v-cloak>
        <div class="row">
            <div class="col-sx-12 col-sm-5 col-md-5 col-lg-5 border-right">
                <div class="img">
                    <a href="@Model.PrimaryImageMediaUrl" rel="fancybox">
                        <img class="mx-auto d-block" src="@Model.PrimaryImageMediaUrl" />
                    </a>
                </div>

                <div>
                    @if (Model.Variants.Any())
                    {
                        <ul class="list-group">
                            @foreach (var variant in Model.Variants)
                            {
                                if (!string.IsNullOrEmpty(variant.PrimaryImageMediaUrl))
                                {
                                    <li class="list-group-item">
                                        <a href="@variant.PrimaryImageMediaUrl" rel="fancybox">
                                            <img class="mx-auto d-block" src="@variant.PrimaryImageMediaUrl" />
                                        </a>
                                    </li>
                                }
                            }
                        </ul>
                    }
                </div>
            </div>
            <div class="col-sx-12 offset-1 col-sm-6 col-md-6 col-lg-6">
                <div class="row">
                    <div class="col-sx-12 col-sm-12 col-md-12 col-lg-12">
                        <h1 class="h2">
                            @Model.DisplayName
                        </h1>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sx-12 col-sm-12 col-md-12 col-lg-12 mt-3">
                        <span class="p-1">@Model.Price</span>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sx-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="mt-2">
                            @Model.ShortDescription
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sx-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="mt-3">
                            <strong>Availability:</strong>
                            @if (Model.AllowOrdering)
                            {
                                <span class="pl-2 text-info">In stock</span>
                            }
                            else
                            {
                                <span class="pl-2 text-danger">Out of stock</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sx-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="mt-3 w-75">
                            @{
                                var uniqueVariants = from v in Model.Variants.SelectMany(p => p.ProductProperties)
                                                     where v.ProductDefinitionField.DisplayOnSite
                                                     group v by v.ProductDefinitionField into g
                                                     select g;
                                if (uniqueVariants.Any())
                                {
                                    <fieldset class="options">
                                        @foreach (var prop in uniqueVariants)
                                        {
                                            var controlName = string.Format("variation-{0}", prop.Key.Name.ToLower());
                                            <div class="general">
                                                <label for="@controlName">@prop.Key.GetDisplayName()</label>
                                                <span class="wrap">
                                                    <select v-model="variantSku" name="@controlName" id="@controlName" class="variant float-right">
                                                        @{
                                                            var products = prop.GroupBy(p => p.Value).Select(g => g.First()).ToList();
                                                        }
                                                        <option>Please select ...</option>
                                                        @foreach (var product in products)
                                                        {
                                                            <option value="@product.Product.VariantSku">@product.Value</option>
                                                        }
                                                    </select>
                                                </span>
                                            </div>
                                        }
                                    </fieldset>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sx-12 col-sm-6 col-md-6 col-lg-6">

                        @foreach (var route in Model.Routes)
                        {
                            <input type="hidden" class="@route.Key" value="@route.Value" />
                        }

                        <add-to-basket :product-sku="'@Model.Sku'" :root-id="$el.id" :variant-sku="variantSku">
                        </add-to-basket>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/x-template" id="add-to-basket-template">
        <div class="mt-2">
            <span class="font-weight-bold">Quantity:</span>
            <span id="ctl00_contentPlaceholder_C020_productsFrontendDetail_ctl00_ctl00_SingleItemContainer_ctrl0_addToCartWidget_ctl00_ctl00_quantityRequiredFieldValidator" style="display:none;">
                <span class="text-danger">
                    When adding product to a cart you must specify the quantity
                </span>
            </span>
            <span id="ctl00_contentPlaceholder_C020_productsFrontendDetail_ctl00_ctl00_SingleItemContainer_ctrl0_addToCartWidget_ctl00_ctl00_quantityValidator" style="display:none;">
                <span class="text-danger">
                    The quantity must be greater than 0 and less than 9,999.
                </span>
            </span>
            <input title="Product Quantity" id="productQuantityInput" v-model="quantity" name="ctl00$contentPlaceholder$C020$productsFrontendDetail$ctl00$ctl00$SingleItemContainer$ctrl0$addToCartWidget$ctl00$ctl00$quantity" type="text" class="form-control" />

            <input type="button" title="Add to cart button" name="ctl00$contentPlaceholder$C020$productsFrontendDetail$ctl00$ctl00$SingleItemContainer$ctrl0$addToCartWidget$ctl00$ctl00$addToCartButton" value="Add to cart" v-on:click="addToBasket" id="ctl00_contentPlaceholder_C020_productsFrontendDetail_ctl00_ctl00_SingleItemContainer_ctrl0_addToCartWidget_ctl00_ctl00_addToCartButton" class="btn btn-info mt-2" />
            <span class="text-success pl-2 pt-1 position-absolute" v-show="showAddToBasketMessage">{{addToBasketMessage}}</span>
        </div>
    </script>
}
