@model dynamic

@using Telerik.Sitefinity.Frontend.Mvc.Helpers
@using Telerik.Sitefinity.Services;
@using Ucommerce.Sitefinity.UI.Mvc.Model;
@using Ucommerce.Sitefinity.UI.Mvc.ViewModels;

@Html.StyleSheet(Url.WidgetContent("assets/src/css/uc-vue-styles.css"), "head")

@helper DisplayCategories(IList<CategoryNavigationCategoryViewModel> categories, bool topLevel)
{
    var categoryClass = "category-parent";
    if (!topLevel)
    {
        categoryClass = "category-child closed";
    }

    <ul class=" @categoryClass">
        @foreach (var category in categories)
        {
            var selected = category.IsActive ? "selected" : "";
            var categoryHref = category.Url;
            <li class="@selected">

                @if (category.Categories.Count > 0)
                {
                    categoryHref = "";
                }
                <a style="" href="@categoryHref">
                    @category.DisplayName
                    @if (topLevel && category.Categories.Count > 0)
                    {
                    <span>&#709;</span>
                    }
                    @if (!topLevel && category.Categories.Count > 0)
                    {
                    <span>&#707;</span>
                    }
                </a>

                @if (category.Categories.Count > 0)
                {
                    @DisplayCategories(category.Categories, false)
                }
            </li>
        }
    </ul>
}

<header ng-controller="categoryNavigationController">
    <div>
        <nav>
            <a href="/" alt="">
                <img src="@Model.ImageUrl" alt="">
            </a>

            @if (Model.Categories.Count > 0)
            {
                @DisplayCategories(Model.Categories, true)
            }

            <ul>
                @if (Model.AllowChangingCurrency && Model.Currencies.Count > 0)
                {
                    <li>
                        @if (Model.CurrentCurrency != null)
                        {
                            <a>
                                <span style="display: inline-block;" class="ng-scope">@Model.CurrentCurrency.DisplayName</span><span>&#709;</span>
                            </a>
                        }
                        <ul>
                            @foreach (var currency in Model.Currencies)
                            {
                                <li><a href="" ng-click="basketService.setCurrency('@currency.PriceGroupId')"><span>@currency.DisplayName</span></a></li>
                            }
                        </ul>
                    </li>
                }
                <li ng-click="searchService.toggleSearchBar()"><a href=""><span>&#128269;</span></a></li>

                @if (!Model.HideMiniBasket && !SystemManager.IsDesignMode)
                {
                    <li ng-click="basketService.toggleSideBarBasket()" ng-class="{'active' : basketService.basket.orderLines.length > 0}">
                        <a href="">
                            <span>
                                <span>{{basketService.basket.NumberOfItemsInBasket}}</span>
                                <span>&#128722;</span>
                            </span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</header>

<div ng-controller="fullTextSearchController">

    <button ng-click="searchService.toggleSearchBar()"><span class="m-1">&#215;</span></button>

    <div>

        @if (Model.SearchPageUrl != null)
        {
            <form action="@Model.SearchPageUrl" _lpchecked="1">
                <span>&#128269;</span>
                <input type="text" autocomplete="off" ng-model="searchService.searchQuery" focus ng-change="searchService.search()" required="" name="search" class="ng-pristine ng-empty ng-invalid ng-invalid-required ng-touched" placeholder="Search for products">
            </form>
        }
        else
        {
            <form _lpchecked="1">
                <span>&#128269;</span>
                <input type="text" autocomplete="off" ng-model="searchService.searchQuery" autofocus ng-change="searchService.search()" required="" name="search" class="ng-pristine ng-empty ng-invalid ng-invalid-required ng-touched" placeholder="Search for products">
            </form>
        }

        <div ng-hide="searchService.searchResult.length == 0 && searchService.suggestion.length == 0">
            <ul>
                <li ng-repeat="suggestion in searchService.suggestions" class="ng-scope" ng-click="searchService.searchQuery = suggestion;searchService.search()">
                    <span>
                        <span class="ng-binding">{{suggestion}}</span>
                    </span>
                </li>
                <li ng-repeat="product in searchService.searchResult" class="ng-scope">
                    <a href="{{product.Url}}">
                        <span>
                            <img ng-src="{{product.ThumbnailImageUrl}}" alt="">
                        </span>
                        <span>
                            <span class="ng-binding">{{product.Name}}</span>
                        </span>
                    </a>
                </li>
            </ul>
            @if (Model.SearchPageUrl != null)
            {
                <a href="@Model.SearchPageUrl?search={{searchService.searchQuery}}">Show all results</a>
            }
        </div>
    </div>

</div>

<script>
    (function () {
        var categories = document.querySelectorAll('.category-parent > li');

        for (var i = 0; i < categories.length; i++) {
            categories[i].addEventListener('click', function () {

                var children = this.children;
                var otherChildren = document.querySelectorAll('.category-child');
                for (var i = 0; i < children.length; i++) {

                    if (children[i].classList.contains('closed')) {

                        for (var j = 0; j < otherChildren.length; j++) {

                            if (otherChildren[j].classList.contains('open')) {
                                otherChildren[j].classList.remove("open");
                                otherChildren[j].classList.add("closed");
                            }
                        }

                        this.children[i].classList.remove("closed");
                        this.children[i].classList.add("open");
                    } else if (children[i].classList.contains('open')) {

                        var otherChildren = document.querySelectorAll('.category-child');
                        for (var j = 0; j < otherChildren.length; j++) {

                            if (otherChildren[j].classList.contains('open')) {
                                otherChildren[j].classList.remove("open");
                                otherChildren[j].classList.add("closed");
                            }
                        }
                    }
                }
            }, false);
        }
    });
</script>
